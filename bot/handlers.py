import logging

from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from bot.state.pc_assember_fsm import PcAssemblerFSM
from bot.service import PcAssemblerService
from bot.keyboard import get_price_keyboard, get_goals_keyboard

assemby_router = Router()

@assemby_router.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        text="""üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –°–±–æ—Ä—â–∏–∫ –ü–ö ü§ñ
–ü–æ–º–æ–≥–∞—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ–¥ —Ç–≤–æ–π –±—é–¥–∂–µ—Ç –∏ –∑–∞–¥–∞—á–∏.

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üß© –£—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–π –±—é–¥–∂–µ—Ç
üéØ –°–ø—Ä–∞—à–∏–≤–∞—é, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –ü–ö (–∏–≥—Ä—ã, —Ä–∞–±–æ—Ç–∞, –º–æ–Ω—Ç–∞–∂ –∏ —Ç.–¥.)
‚öôÔ∏è –ü–æ–¥–±–∏—Ä–∞—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ
üí° –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?

–ù–∞–ø–∏—à–∏  /start_assembly. ‚Äî –∏ —Å–æ–±–µ—Ä—ë–º —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ü–ö üíª
""",
    )


@assemby_router.message(Command("start_assembly"))
async def start_assembly(message: types.Message, state: FSMContext):
    # Reset the state at the beginning of the assembly process
    await state.clear()
    # Set state to price selection
    await state.set_state(PcAssemblerFSM.price)

    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=get_price_keyboard()
    )


@assemby_router.callback_query(PcAssemblerFSM.price, lambda c: c.data.startswith('price_'))
async def process_price_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handler to process the selected price
    """
    # Extract the price from the callback data
    selected_price = callback_query.data.split('_')[1]

    # Store the selected price in state
    await state.update_data(price=selected_price)

    # Move to the next state - selecting goal
    await state.set_state(PcAssemblerFSM.goals)

    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selected_price}")
    await callback_query.message.edit_text(
        f"–ë—é–¥–∂–µ—Ç: ${selected_price}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ü–ö:",
        reply_markup=get_goals_keyboard()
    )


@assemby_router.callback_query(PcAssemblerFSM.goals, lambda c: c.data.startswith('goal_'))
async def process_goal_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handler to process the selected goal and generate PC configuration
    """
    # Extract the goal from the callback data
    goal_key = callback_query.data.split('_')[1]

    # Store the selected goal in state
    await state.update_data(goal=goal_key)

    # Get all the data stored in state
    data = await state.get_data()

    # Show loading message
    await callback_query.answer(f"–ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è: {goal_key}")
    await callback_query.message.edit_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")

    try:
        # Get the user's budget
        price_usd = float(data.get('price', '1000'))

        # Create service instance and get PC build
        pc_assembler = PcAssemblerService(
            data_dir="./bot/pc-part-dataset/data/json/")
        result = await pc_assembler.generate_pc_build(budget=price_usd, goal=goal_key)

        if result['status'] == 'OPTIMAL':
            # Format the message with the build details
            message_text = f"üñ•Ô∏è <b>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ({result['goal_ru']})</b>\n\n"

            # Convert prices to RUB for display
            exchange_rate = 75.0  # Update this to get current exchange rate
            total_price_rub = pc_assembler.convert_usd_to_rub(
                result['total_price'], exchange_rate)

            # Add components to the message
            for comp in result['components_with_details']:
                price_rub = pc_assembler.convert_usd_to_rub(
                    comp['price'], exchange_rate)
                message_text += f"‚Ä¢ <b>{comp['category_ru']}:</b> {comp['name']}\n"
                message_text += f"  üí∞ {pc_assembler.format_price(comp['price'])} / {pc_assembler.format_price(price_rub, 'RUB')}\n"

            message_text += f"\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {pc_assembler.format_price(result['total_price'])} / {pc_assembler.format_price(total_price_rub, 'RUB')}"
            message_text += f"\n<b>–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞:</b> {pc_assembler.format_price(result['remaining_budget'])}"

            # Add buttons for actions
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîÑ –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="restart")],
                [types.InlineKeyboardButton(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_build")]
            ])

            await callback_query.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")

            # Store the build in state for later use
            await state.update_data(build_result=result)

        elif result['status'] == 'INFEASIBLE':
            # No solution found
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–ª—å.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart")]
                ])
            )
        else:
            # Error in optimization
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {result['message']}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart")]
                ])
            )
    except Exception as e:
        # Log the error
        import traceback
        logging.error(f"Error generating PC build: {e}")
        logging.error(traceback.format_exc())

        # Show error message to user
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart")]
            ])
        )


@assemby_router.callback_query(lambda c: c.data == "new_assembly")
async def start_new_assembly(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handler to start a new assembly process
    """
    await callback_query.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É!")
    await state.set_state(PcAssemblerFSM.price)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=get_price_keyboard()
    )
