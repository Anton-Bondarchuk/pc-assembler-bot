from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.state.pc_assember_fsm import PcAssemblerFSM
from bot.yandex_market.api.service import PcAssemblerService

assemby_router = Router()


@assemby_router.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        text="""üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –°–±–æ—Ä—â–∏–∫ –ü–ö ü§ñ
–ü–æ–º–æ–≥–∞—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ–¥ —Ç–≤–æ–π –±—é–¥–∂–µ—Ç –∏ –∑–∞–¥–∞—á–∏.

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üß© –£—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–π –±—é–¥–∂–µ—Ç
üéØ –°–ø—Ä–∞—à–∏–≤–∞—é, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –ü–ö (–∏–≥—Ä—ã, —Ä–∞–±–æ—Ç–∞, –º–æ–Ω—Ç–∞–∂ –∏ —Ç.–¥.)
‚öôÔ∏è –ü–æ–¥–±–∏—Ä–∞—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ
üí° –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?

–ù–∞–ø–∏—à–∏  /start_assembly. ‚Äî –∏ —Å–æ–±–µ—Ä—ë–º —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ü–ö üíª
""",
    )


def get_price_keyboard():
    """
    Creates an inline keyboard with price options from $500 to $2500 with $500 step
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="$500", callback_data="price_500"),
            InlineKeyboardButton(text="$1000", callback_data="price_1000"),
        ],
        [
            InlineKeyboardButton(text="$1500", callback_data="price_1500"),
            InlineKeyboardButton(text="$2000", callback_data="price_2000"),
        ],
        [
            InlineKeyboardButton(text="$2500", callback_data="price_2500"),
        ]
    ])
    return keyboard


def get_goals_keyboard():
    """
    Creates an inline keyboard with PC usage goal options
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="goal_games"),
        ],
        [
            InlineKeyboardButton(text="üìö –û—Ñ–∏—Å –∏ —É—á–µ–±–∞", callback_data="goal_office"),
        ],
        [
            InlineKeyboardButton(text="üé® –†–∞–±–æ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ 3–¥", callback_data="goal_graphics"),
        ],
        [
            InlineKeyboardButton(text="üé¨ –í–∏–¥–æ–º–æ–Ω—Ç–∞–∂ –∏ —Å—Ç—Ä–∏–º–º–∏–Ω–≥", callback_data="goal_video"),
        ],
        [
            InlineKeyboardButton(text="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="goal_programming"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∫", callback_data="goal_universal"),
        ]
    ])
    return keyboard


@assemby_router.message(Command("start_assembly"))
async def start_assembly(message: types.Message, state: FSMContext):
    # Reset the state at the beginning of the assembly process
    await state.clear()
    # Set state to price selection
    await state.set_state(PcAssemblerFSM.price)
    
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=get_price_keyboard()
    )


@assemby_router.callback_query(PcAssemblerFSM.price, lambda c: c.data.startswith('price_'))
async def process_price_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handler to process the selected price
    """
    # Extract the price from the callback data
    selected_price = callback_query.data.split('_')[1]
    
    # Store the selected price in state
    await state.update_data(price=selected_price)
    
    # Move to the next state - selecting goal
    await state.set_state(PcAssemblerFSM.goals)
    
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selected_price}")
    await callback_query.message.edit_text(
        f"–ë—é–¥–∂–µ—Ç: ${selected_price}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ü–ö:",
        reply_markup=get_goals_keyboard()
    )



@assemby_router.callback_query(PcAssemblerFSM.goals, lambda c: c.data.startswith('goal_'))
async def process_goal_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Handler to process the selected goal
    """
    # Extract the goal from the callback data
    goal_key = callback_query.data.split('_')[1]
    
    # Map goal keys to user-friendly names
    goal_names = {
        "games": "–ò–≥—Ä—ã",
        "office": "–û—Ñ–∏—Å –∏ —É—á–µ–±–∞",
        "graphics": "–†–∞–±–æ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ 3–¥",
        "video": "–í–∏–¥–æ–º–æ–Ω—Ç–∞–∂ –∏ —Å—Ç—Ä–∏–º–º–∏–Ω–≥",
        "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "universal": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∫"
    }
    
    selected_goal = goal_names.get(goal_key, goal_key)
    
    # Store the selected goal in state
    await state.update_data(goal=selected_goal)
    
    # Get all the data stored in state
    data = await state.get_data()
    
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_goal}")
    
    # Show loading message
    await callback_query.message.edit_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
    
    try:
        pc_service = PcAssemblerService()

        # Get PC build from service
        pc_build = await pc_service.create_pc_build(int(data['price']), selected_goal)
        
        # Format the response message
        components_text = ""
        for component_type, component in pc_build["components"].items():
            # Translate component type to Russian
            component_types_ru = {
                "cpu": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
                "gpu": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
                "ram": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å",
                "storage": "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å",
                "motherboard": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞",
                "power_supply": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è",
                "case": "–ö–æ—Ä–ø—É—Å"
            }
            
            component_name_ru = component_types_ru.get(component_type, component_type)
            components_text += f"‚Ä¢ {component_name_ru}: {component['name']} - {component['price']} ‚ÇΩ\n"
        
        result_message = (
            f"üñ•Ô∏è <b>–°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü–ö</b>\n\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: ${data['price']}\n"
            f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {selected_goal}\n\n"
            f"<b>–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ:</b>\n"
            f"{components_text}\n"
            f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {pc_build['total_price_rub']} ‚ÇΩ (${pc_build['total_price_usd']})"
        )
        
        await callback_query.message.edit_text(
            result_message,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    